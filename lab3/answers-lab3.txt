1. What is the purpose of having an individual handler function for each exception/interrupt?(i.e., if all exceptions/
   interrupts were delivered to the same handler, what feature that exists in the current implementation could not be 
   provided?)

Answer: 不同异常/中断的处理方式是不同的，为每种异常/中断提供相应的handler可以根据不同异常/中断类型做出相应的处理。

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce 
   a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What
   happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is
   interrupt vector 14)? 

Answer: 因为正常情况下内核态不会发生page fault，如果调用kernel的page fault handler表示系统产生异常。

3. The break point test case will either generate a break point exception or a general protection fault depending on how
   you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to 
   set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it 
   to trigger a general protection fault?

Answer: 使用TRAPHANDLER_NOEC不会将error code压入栈中，breakpoint异常将正常处理，如果调用TRAPHANDLER,cpu会将error code压入
栈，导致general protection fault.
